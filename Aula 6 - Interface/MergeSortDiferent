// using System;
// Console.WriteLine("Hello, World!");


// public class File : IComparable
// {
//     public int CompareTo(object? obj)
//     {
//         throw new NotImplementedException();
//     }
// }


// public class BigNatural : IComparable
// {
//     private ulong a;
//     private ulong b;

//     public int CompareTo(object? obj)
//     {
//         if (obj == null)
//             throw new InvalidOperationException();
//         if (obj is BigNatural bn)
//         {
//             if (this.b > bn.b)
//                 return 1;
//             else if (this.b < bn.b)
//                 return -1;
//             else
//                return (int)(this.a - bn.a);
            
//         }
//         else if (obj is int i)
//         {
//             if (this.b > 0)
//                 return 1;
//             if (i < 0)
//                 return 1;
//             return (int)(a - (ulong)i);
//         }
//         else if (obj is ulong u)
//         {   
//             if (this.b > 0)
//                 return 1;
//             return (int)(a - u);
//         }
//         throw new InvalidOperationException();
//     }

//     public override string ToString()
//     {
//         return base.ToString("00000000000000000000") + b.ToString("0000000000000000000");
//     }
//     public static BigNatural Parse(string str)
//     {   
//         int.splitCharacter = str.Length - 19;
//         if (splitCharacter < 0)

//     }

// }

list.Add(4);
list.Add(2);
list.Add(1);

for (int i = 0; i < 1000; i++)
{
    list.Add(i);
}
Console.WriteLine(list.Count);

public class IntList


{
    private int[] values = new int[10];
    private int count = 0;


    public int this[int index]
    {
        get
        {
            if (index < 0 || index >= count)
                throw new IndexOutOfRangeException();
            return values[index];
        }
        set
        {
            if (index < 0 || index >= count)
                throw new IndexOutOfRangeException();
            values[index] = values;            
        }
    }


    public int Count => count;

    public void Add(int num)
    {
        if (count == values.Length)
        {
        int[] newArr = new int[2 * values.Length];
        for (int i = 0; i < values.Length; i++)
            newArr[i] = values[i];
        this.values = newArr;
        }


        values[count] = num;
        count++;
    }
}